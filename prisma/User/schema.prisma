generator client {
  provider = "prisma-client-js"
  output   = "../User/generated/user"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_USER")
}

model Account {
  accountId     Int               @id @default(autoincrement())
  email         String            @unique
  userId        String            @unique
  password      String
  cash          Int               @default(100000)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  role          String            @default("USER")
  lastLoginAt   DateTime?
  auction       Auction[]
  receivedGifts GiftTransaction[] @relation("ReceivedGifts")
  sentGifts     GiftTransaction[] @relation("SentGifts")
  matchHistory  MatchHistory[]    @relation("MyMatches")
  opponentMatch MatchHistory[]    @relation("OpponentMatches")
  ownedPlayers  OwnedPlayers[]
  rank          Rank?             @relation("rank")
  refreshToken  RefreshToken?     @relation("refreshToken")
  squad         Squad?
  opponentMatch MatchHistory[] @relation("OpponentMatches")
  bids      Bid[]

  @@map("Account")
}

model SquadMembers {
  id            Int          @id @default(autoincrement())
  squadId       Int
  ownedPlayerId Int
  ownedPlayer   OwnedPlayers @relation(fields: [ownedPlayerId], references: [ownedPlayerId])
  squad         Squad        @relation(fields: [squadId], references: [squadId])

  @@unique([squadId, ownedPlayerId])
  @@index([ownedPlayerId], map: "squadMembers_ownedPlayerId_fkey")
  @@map("squadMembers")
}

model OwnedPlayers {
  ownedPlayerId Int            @id @default(autoincrement())
  accountId     Int
  playerId      Int
  name          String
  rarity        String
  level         Int?
  attack        Int
  defence       Int
  speed         Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auctions      Auction[]
  account       Account        @relation(fields: [accountId], references: [accountId])
  squadMembers  SquadMembers[]

  @@index([accountId], map: "OwnedPlayers_accountId_fkey")
  @@map("OwnedPlayers")
}

model Squad {
  squadId      Int            @id @default(autoincrement())
  accountId    Int            @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  account      Account        @relation(fields: [accountId], references: [accountId])
  squadMembers SquadMembers[]

  @@map("Squad")
}

model RefreshToken {
  refreshTokenId Int       @id @default(autoincrement())
  accountId      Int       @unique
  token          String
  createdAt      DateTime  @default(now())
  expiresAt      DateTime?
  account        Account   @relation("refreshToken", fields: [accountId], references: [accountId])

  @@map("Refreshtoken")
}

model Rank {
  rankId    Int      @id @default(autoincrement())
  accountId Int      @unique
  rankScore Int      @default(1000)
  tier      String   @default("silver")
  updatedAt DateTime @updatedAt
  draw      Int      @default(0)
  lose      Int      @default(0)
  win       Int      @default(0)
  account   Account  @relation("rank", fields: [accountId], references: [accountId])

  @@map("Rank")
}

model MatchHistory {
  matchId      Int      @id @default(autoincrement())
  accountId    Int
  goalScore    Int      @default(0)
  passScore    Int      @default(0)
  shootScore   Int      @default(0)
  defenceScore Int      @default(0)
  createdAt    DateTime @default(now())
  opponentId   Int
  account      Account  @relation("MyMatches", fields: [accountId], references: [accountId])
  opponent     Account  @relation("OpponentMatches", fields: [opponentId], references: [accountId])

  @@index([accountId], map: "MatchHistory_accountId_fkey")
  @@index([opponentId], map: "MatchHistory_opponentId_fkey")
  @@map("MatchHistory")
}

model GiftTransaction {
  id         Int        @id @default(autoincrement())
  senderId   Int
  receiverId Int
  cash       Int
  status     GiftStatus @default(success)
  createdAt  DateTime   @default(now())
  receiver   Account    @relation("ReceivedGifts", fields: [receiverId], references: [accountId])
  sender     Account    @relation("SentGifts", fields: [senderId], references: [accountId])

  @@index([receiverId], map: "GiftTransaction_receiverId_fkey")
  @@index([senderId], map: "GiftTransaction_senderId_fkey")
  @@map("GiftTransaction")
}

model Auction {
  auctionId     Int           @id @default(autoincrement())
  accountId     Int
  ownedPlayerId Int
  startingPrice Int
  currentPrice  Int
  status        AuctionStatus @default(open)
  createdAt     DateTime      @default(now())
  endsAt        DateTime
  deletedAt     DateTime?
  account       Account       @relation(fields: [accountId], references: [accountId])
  ownedPlayer   OwnedPlayers  @relation(fields: [ownedPlayerId], references: [ownedPlayerId])
  bid           Bid[]

  @@index([accountId], map: "Auction_accountId_fkey")
  @@index([ownedPlayerId], map: "Auction_ownedPlayerId_fkey")
  @@map("Auction")
}

model Bid {
  bidId     Int      @id @default(autoincrement())
  auctionId Int
  accountId Int   // bidderId 대신 accountId로 표기
  bidAmount Int
  bidTime   DateTime @default(now())

  auction Auction @relation(fields: [auctionId], references: [auctionId])
  account Account @relation(fields: [accountId], references: [accountId]) // Account 테이블 참조

  @@map("Bid")
}



enum GiftStatus {
  success
  pending
  failed
}

enum AuctionStatus {
  open
  closed
  cancelled
}
